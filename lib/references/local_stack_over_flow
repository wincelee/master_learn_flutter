
----------------------------------------------------------------------------------------------------

                                    j-s-o-n

JsonObjectWithJsonArrayThatHasName

{
    dataKey: [
      {
        key1: value1,
        key2: value2,
        key3: value3,
      }
    ]
}

```````````````````````````````````

Easiest way (one dimensional):

Map<String, dynamic> data = Map<String, dynamic>.from(json.decode(response.body));

print(data['name']);

````````````````````````````````
Map<String, dynamic> map = json.decode(response.body);
List<dynamic> data = map["dataKey"];
print(data[0]["name"]);


`````````````````````````````

You can use new Map<String, dynamic>.from(snapshot.value);

`````````````````````````````

As doesn't change the type, it's just an assertion.

You need to use:

map['eventType'].cast<String, dynamic>() or

Map<String, dynamic>.from(map['eventType'])

You can also solved by this way:

Map<String, dynamic> myMap = Map<String, dynamic>.from(/*Your Source*/ );


----------------------------------------------------------------------------




----------------------------------------------------------------------------

passing text from screen 1 to screen 2

openDetailPage(ItemModel data, int index) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) {
        return MovieDetailBlocProvider(
          child: MovieDetail(
            title: data.results[index].title,
            posterUrl: data.results[index].backdrop_path,
            description: data.results[index].overview,
            releaseDate: data.results[index].release_date,
            voteAverage: data.results[index].vote_average.toString(),
            movieId: data.results[index].id,
          ),
        );
      }),
    );
  }

----------------------------------------------------------------------------

Possible on click on backgroundImage

 Column(
                 crossAxisAlignment: CrossAxisAlignment.center,
                 mainAxisAlignment: MainAxisAlignment.spaceAround,
                 children: [
                   GestureDetector(
                     onTap: () {
                       Navigator.push(
                         context,
                         MaterialPageRoute(builder: (context) => MyApp7()),
                       );
                     },
                     child: CircleAvatar(
                       radius: 50,
                       // backgroundColor: Colors.amber,
                       child: CircleAvatar(
                           backgroundColor: Colors.grey[50],
                           radius: 50,
                           // child: Image.asset("assets/images/nophotoMale.png")
                           backgroundImage:
                               AssetImage("assets/images/nophotoMale.png")),
                     ),
                   ),
                 ],
               ),

--------------------------------------------------------------------------------------------

Material( // with Material
                    child: Image.network('https://placeimg.com/640/480/any'),
                    elevation: 18.0,
                    shape: const CircleBorder(),
                    clipBehavior: Clip.antiAlias,

                  )

--------------------------------------------------------------------------------------------

mainAxisAlignment: MainAxisAlignment.spaceEvenly (items in row arranged with even spaces)


--------------------------------------------------------------------------------------------

// If you want the whole table to be Centered, use the mainAxisAlignment property of Column.
///Column
mainAxisAlignment: MainAxisAlignment.center //Center Column contents vertically,
crossAxisAlignment: CrossAxisAlignment.center //Center Column contents horizontally,

///Row
mainAxisAlignment: MainAxisAlignment.center //Center Row contents horizontally,
crossAxisAlignment: CrossAxisAlignment.center //Center Row contents vertically,

---------------------------------------------------------------------------------------------

Make Column Items Stretch and fill the column from left to right and center text

crossAxisAlignment: CrossAxisAlignment.stretch

-------------------------------------------------------------------------------------------

Wrap_content ,Wrap_content :

 //use this as child
 Wrap(
  children: <Widget>[*your_child*])

Match_parent,Match_parent:

 //use this as child
Container(
        height: double.infinity,
    width: double.infinity,child:*your_child*)

Match_parent,Wrap_content :

 //use this as child
Row(
  mainAxisSize: MainAxisSize.max,
  children: <Widget>[*your_child*],
);

Wrap_content ,Match_parent:

 //use this as child
Column(
  mainAxisSize: MainAxisSize.max,
  children: <Widget>[your_child],
);

You should use Expanded only within a Column, Row or Flex

----------------------------------------------------------------------------------------------------

                        l-i-s-t-s
                        printlist
                      p-r-i-n-t-l-i-s-t

Printing List

~~~ First Method 1 (override toString in class example below)

    >>> @override toString() => 'id: $id title: $title subTitle: $subTitle imageUrl: $imageUrl';

~~~ Using Method 2 (using for loop)

    >>>

    for (var item in itemsList) {
              Logger().i("id: ${item.id} title: ${item.title} subTitle: ${item.subTitle} imageUrl: ${item.imageUrl} ");
            }

    >>> Example of using map instead of loop

    for (DateTime date in datesList) {
          formattedDates
               add(DateFormat('dd-MM-yyyy').format(date));
     }

     formattedDates = datesList
          .map((date) =>
              DateFormat('dd-MM-yyyy').format(date))
      .toList();

~~~ Using Method 3 (Json Encode)

    >>> add toJsonFunction in Class

     Map<String, dynamic> toJson() => {
        'email': email,
        'about': about,
        'name': name,
        'picture': picture,
        'index': index,
        'imageFetchType': imageFetchType,
      };

     >>> log/print using jsonEncode

     log("UserList: ${jsonEncode(usersList)}");

-------------------------

//grepper convert map values to string list flutter
~~~ Convert Map values to string list flutter

~~~ Example code below

    final Map<dynamic, dynamic> json = {
      "name": "alice",
      "data": ["foo", "bar", "baz"],
    };

    // method 1, cast while mapping:
    final data1 = (json["data"] as List)?.map((e) => e as String)?.toList();
    print("method 1 prints: $data1");

//end grepper

-------------------------

        Printing using jsonEncode

~~~ Examples Below

      User user = User('bezkoder', 21);
      String jsonUser = jsonEncode(user);
      print(jsonUser);

      List<Tag> tags = [Tag('tagA', 3), Tag('tagB', 6), Tag('tagC', 8)];
      String jsonTags = jsonEncode(tags);
      print(jsonTags);

      Tutorial tutorial = Tutorial('Dart Tut#2', 'Tut#2 Description', user, tags);
      String jsonTutorial = jsonEncode(tutorial);
      print(jsonTutorial);

-------------------------

        Remove Duplicates From List

import "dart:convert";
void main(){
  final myList = [
    {
      'name': 'Andy',
      'age': 41
    },
    {
      'name': 'Bill',
      'age': 43
    },
    {
      'name': 'Andy',
      'age': 41
    }
  ];

  // convert each item to a string by using JSON encoding
  final jsonList = myList.map((item) => jsonEncode(item)).toList();

  // using toSet - toList strategy
  final uniqueJsonList = jsonList.toSet().toList();

  // convert each item back to the original form using JSON decoding
  final result = uniqueJsonList.map((item) => jsonDecode(item)).toList();

  print(result);
}


----------------------------------------------------------------------------------------------------

                                    ||| l-i-s-t-v-i-e-w-s |||


~~~ Using custom scroll view


  @override
  Widget build(BuildContext context) => Scaffold(
      body: CustomScrollView(slivers: [
            //custom widget
            SliverToBoxAdapter(child: YourContainer()),
            //horizontal list
            SliverToBoxAdapter(child: Container(
                  height: 55,
                  child: ListView.builder(
                      scrollDirection: Axis.horizontal,
                      itemCount: 10,
                      itemBuilder: (context, index) {
                        return YourItem();
                      })))
            ])),
            //grid list
            SliverGrid(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2, mainAxisSpacing: 0, crossAxisSpacing: 0),
                delegate: SliverChildListDelegate(
                    List.generate(10, (index) => YourAnotherItem())))
          ]));


~~~ Using ListView method 1

body: ListView(
  children: <Widget>[
    GridView.count(
      crossAxisCount: 3,
      physics: NeverScrollableScrollPhysics(), // to disable GridView's scrolling
      shrinkWrap: true, // You won't see infinite size error
      children: <Widget>[
        Container(
          height: 24,
          color: Colors.green,
        ),
        Container(
          height: 24,
          color: Colors.blue,
        ),
      ],
    ),
  ],
),


~~~ Using ListView method 2

Scaffold(
      backgroundColor: Colors.white,
      appBar: new AppBar(
        title: new Text('Search'),
      ),
      body: new ListView(
        shrinkWrap: true,
        physics: ScrollPhysics(),
        children: <Widget>[
          new SizedBox(height: 20.0),
          new Container(
            child: new ListView.builder(
              shrinkWrap: true,
              itemCount: 5,
              physics: ScrollPhysics(),
              itemBuilder: (context, index) {
                return new Column(
                  children: <Widget>[
                    new Container(
                      height: 50.0,
                      color: Colors.green,
                      child: new Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          new Icon(Icons.format_list_numbered,
                              color: Colors.white),
                          new Padding(
                              padding: const EdgeInsets.only(right: 5.0)),
                          new Text('List Item',
                              style: new TextStyle(
                                  fontSize: 20.0, color: Colors.white)),
                        ],
                      ),
                    ),
                    new Container(
                      height: 150.0,
                      child: new ListView.builder(
                        shrinkWrap: true,
                        scrollDirection: Axis.horizontal,
                        itemCount: 10,
                        itemBuilder: (context, index) {
                          return new Card(
                            elevation: 5.0,
                            child: new Container(
                              height: MediaQuery.of(context).size.width / 3,
                              width: MediaQuery.of(context).size.width / 3,
                              alignment: Alignment.center,
                              child: new Text('Item $index'),
                            ),
                          );
                        },
                      ),
                    ),
                    new SizedBox(height: 20.0),
                  ],
                );
              },
            ),
          ),
        ],
      ),
    );


----------------------------------------------------------------------------------------------------

                                    ||| Page Transitions |||
                                           ||| Page |||
                                          ||| P-a-g-e |||
                                         ||| Transitions |||
                                   ||| T-r-a-n-s-i-t-i-o-n-s |||

~~~ Cupertino page transition

     Navigator.push(context, CupertinoPageRoute(builder: (context) => const Home()));

~~~ Custom made Fade Transition

    Navigator.push(
            context,
            PageRouteBuilder(
              pageBuilder: (c, a1, a2) => const Home(),
              transitionsBuilder: (c, anim, a2, child) => FadeTransition(opacity: anim, child: child),
              transitionDuration: const Duration(seconds: 1),
            ),
          );

~~~ Using Custom built PageRouteBuilders with custom Animations found in references
~~~ Example below

    Navigator.pushReplacement(context, ScaleInTransition(page: const Home()));


----------------------------------------------------------------------------------------------------

                                    ||| T-e-x-t-F-o-r-m-F-i-e-l-d |||

~~~ Changing TextFormField focusedBorderColor

        TextFormField(
                decoration: InputDecoration(
                  labelText: "Label Text",
                  fillColor: Colors.white,
                  focusedBorder:OutlineInputBorder(
                    borderSide: const BorderSide(color: Colors.white, width: 2.0),
                    borderRadius: BorderRadius.circular(25.0),
                  ),
                ),
              )

//grepper dense text form field flutter

                                ||| Dense |||
                            ||| Dense TextFormField |||
                               ||| D-e-n-s-e |||

Flutter Dense TextField

 decoration: InputDecoration(
                    isDense: true,
                    contentPadding: EdgeInsets.only(
                        bottom: 15, top: 15, left: 10, right: 10)),
     ),

//end grepper
-------------------------------------------------------------------------------------------------------

//grepper run time type

                        ||| Know RunTimeType of Object in Flutter |||
                                  r-u-n-t-i-m-e-t-y-p-e


 Logger().i("RunTimeType: ${value.runtimeType}");

//end grepper

-------------------------------------------------------------------------------------------------------


Check operating system platform (o-p-e-r-a-t-i-n-g p-l-a-t-f-o-r-m)

import 'package:flutter/foundation.dart';
if ((defaultTargetPlatform == TargetPlatform.iOS) || (defaultTargetPlatform == TargetPlatform.android)) {
    // Some android/ios specific code
}
else if ((defaultTargetPlatform == TargetPlatform.linux) || (defaultTargetPlatform == TargetPlatform.macOS) || (defaultTargetPlatform == TargetPlatform.windows)) {
    // Some desktop specific code there
}
else {
    // Some web specific code there
}

-------------------------------------------------------------------------------------------------------

                    t-e-x-t-f-i-e-l-d-s

~~~ Boolean method to directly return true or false

     bool isPhoneNumberEmpty() => phoneNoController.text.isEmpty;

     bool isPhoneNumberEmpty() => phoneNoController.text.isNotEmpty;

-------------------------------------------------------------------------------------------------------

                        basicAuth
                        b-a-s-i-c-A-u-t-h

import 'dart:convert';
import 'package:http/http.dart';

main() async {

  String username = 'luiz';
  String password = '123';
  String basicAuth = 'Basic ' + base64Encode('$username:$password');

  var response = await http.post(
      'https://api.site.io/new',
      headers: <String, String>{'authorization': basicAuth},
      body: {'name': 'doodle', 'color': 'blue'},
  );

  print('Response status: ${response.statusCode}');
  print('Response body: ${response.body}');

}

-------------------------------------------------------------------------------------------------------

                        h-t-t-p-s

~~~ Get Request with params and headers method 1

~~~ Where body and headers are both maps

       final response = await get(Uri.parse(url).replace(queryParameters: body),
          headers: headers);

~~~ Get Request with params and headers method 2

final queryParameters = {
      'param1': 'one',
      'param2': 'two',
    };

    try{
      final response = await get(Uri.http(url, params), headers: headers);
    }catch(e){

    }


-------------------------------------------------------------------------------------------------------

                        m-a-p-s

~~~ ListView with map key value no hardcoding

    Column(children: [
            Flexible(child: FutureBuilder(
                future: AsyncFutures().initPlatformDetails(),
                builder: (BuildContext context, AsyncSnapshot<Map<String, dynamic>> asyncSnapshot){

                  if(asyncSnapshot.hasData) {

                    return ListView(
                      children: asyncSnapshot.data!.keys.map((String value) {
                        return Row(
                          children: <Widget>[
                            Container(
                              padding: const EdgeInsets.all(10),
                              child: Text(
                                value,
                                style: const TextStyle(
                                  fontWeight: FontWeight.bold
                                ),
                              ),
                            ),
                            Expanded(child: Container(
                              padding: const EdgeInsets.fromLTRB(0.0, 10.0, 0.0, 10.0),
                              child: Text(
                                asyncSnapshot.data![value].toString(),
                              ),
                            ))
                          ],
                        );
                      }).toList(),
                    );
                  }

                  return const Text("Getting Platform Details...");
                }))
          ],)

~~~ Getting Map indexes

        >>> Example (index["image"])


        Row(
                            children: departmentsList!
                                .map<Widget>((index) => GestureDetector(
                                      child: GridTile(
                                        child: Card(
                                          shape: RoundedRectangleBorder(
                                            // card corner radius
                                            borderRadius: BorderRadius.circular(10),
                                          ),
                                          elevation: 5,
                                          color: Colors.white,
                                          child: Container(
                                            alignment: Alignment.center,
                                            child: Column(
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.center,
                                              mainAxisAlignment:
                                                  MainAxisAlignment.center,
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                Flexible(
                                                  child: ClipRRect(
                                                      borderRadius:
                                                          BorderRadius.circular(5),
                                                      child: FadeInImage.assetNetwork(
                                                          fit: BoxFit.cover,
                                                          placeholder:
                                                              "gifs/converging_dots.gif",
                                                          image: index["image"],
                                                          width: 200,
                                                          height: 100)),
                                                ),
                                                Container(
                                                  padding: const EdgeInsets.all(5),
                                                  child: Text(
                                                    index["name"] ?? '',
                                                    maxLines: 1,
                                                    softWrap: true,
                                                    textAlign: TextAlign.center,
                                                    style: Config.normalTextStyle,
                                                  ),
                                                )
                                              ],
                                            ),
                                          ),
                                        ),
                                      ),
                                    ))
                                .toList(),
                          )

~~~ Getting Map Index if list is empty

    list.map((element) {
      // get index
      var index = userBoard.indexOf(element);
      return Container(

      );
    }).toList()

~~~ Getting Map Index using asMap.entries

     list.asMap().entries.map((e) {
           var index = e.key;
           var value = e.value;
           // ...
         }

~~~ Getting Map Index using mapIndexed

    list.mapIndexed(
      (int index, element) => Container( ... ))
         .toList();


-------------------------------------------------------------------------------------------------------

                        c-u-p-e-r-t-i-n-o

Custom Cupertino dialog

static void exceptionsAlertDialog(BuildContext context) {
    showDialog(
        barrierDismissible: false,
        context: context,
        builder: (BuildContext context) {
          // prevent back button press
          return CupertinoAlertDialog(
            title: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: <Widget>[
                Text("Login | Register"),
                Icon(
                  Icons.error,
                  color: Colors.red,
                ),
              ],
            ),
            content:
                Text("We encountered an error while processing your request"),
            actions: <Widget>[
              CupertinoDialogAction(
                child: Text("close".toUpperCase()),
                onPressed: () {
                  Navigator.of(context).pop();
                },
              ),
            ],
          );
        });
  }

------------------------------

showDialog(
        barrierDismissible: false,
        context: context,
        builder: (BuildContext context) {
          // prevent back button press
          return CupertinoAlertDialog(
            title: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: <Widget>[
                Container(
                  width: double.infinity,
                    child: Text("Login | Register")),
                Container(
                    width: double.infinity,
                    child: Icon(
                  Icons.error,
                  size: 50,
                  color: Colors.red,
                )),
              ],
            ),
            content:
                Text("We encountered an error while processing your request"),
            actions: <Widget>[
              CupertinoDialogAction(
                child: Text("close".toUpperCase()),
                onPressed: () {
                  Navigator.of(context).pop();
                },
              ),
            ],
          );
        });

-------------------------------------------------------------------------------------------------------


                        richText | textSpan
                  r-i-c-h-t-e-x-t | t-e-x-t-s-p-a-n


 RichText(
   text: TextSpan(
     children: [
       TextSpan(
         text: 'Single tap',
         style: TextStyle(color: Colors.red[300]),
         recognizer: TapGestureRecognizer()..onTap = () {
           // Single tapped.
         },
       ),
       TextSpan(
         text: ' Double tap',
         style: TextStyle(color: Colors.green[300]),
         recognizer:  DoubleTapGestureRecognizer()..onDoubleTap = () {
           // Double tapped.
         }
       ),
       TextSpan(
         text: ' Long press',
         style: TextStyle(color: Colors.blue[300]),
         recognizer: LongPressGestureRecognizer()..onLongPress = () {
           // Long Pressed.
         },
       ),
     ],
   ),
 )

-------------------------------------------------------------------------------------------------------

 CircleAvatar(
      backgroundColor: Colors.blue,
      child: Text("A"),
  );

   CircleAvatar(
        backgroundColor: Colors.blue,
        child: Text("A"),
        maxRadius: 30,
        foregroundImage: NetworkImage("enterImageUrl"),
    );

      String mystring = 'Hello World';

      print('${mystring[0]}');

-------------------------------------------------------------------------------------------------------

                        s-t-e-p-p-e-r

Stepper(
        controlsBuilder: (BuildContext context, ControlsDetails controls) {
                      return Center(child: Container(
                        margin: const EdgeInsets.only(top: 5),
                          padding: const EdgeInsets.only(top: 5),
                          child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: <Widget>[
                          TextButton(
                            onPressed: controls.onStepCancel,
                            child: Text("Back".toUpperCase()),
                          ),
                          ElevatedButton(
                            onPressed: controls.onStepContinue,
                            child: Text("continue".toUpperCase()),
                            style: ElevatedButton.styleFrom(
                              shape: const StadiumBorder(),
                            ),
                          ),
                        ],
                      )));
                    },
        ...
    )

----------------------

            Stepper controls according to each step

controlsBuilder: (BuildContext context,
              {VoidCallback onStepContinue, VoidCallback onStepCancel}) {
            return Row(
              children: <Widget>[
                _activeCurrentStep == 0
                    ? TextButton(
                        onPressed: onStepContinue,
                        child: const Text('NEXT'),
                      )
                    : _activeCurrentStep == 1
                        ? Container(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                TextButton(
                                  onPressed: onStepContinue,
                                  child: const Text('NEXT'),
                                ),
                                TextButton(
                                  onPressed: onStepCancel,
                                  child: const Text('BACK'),
                                ),
                              ],
                            ),
                          )
                        : _activeCurrentStep >= 2
                            ? Container(
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    TextButton(
                                      onPressed: onStepContinue,
                                      child: const Text('SAVE'),
                                    ),
                                    TextButton(
                                      onPressed: onStepCancel,
                                      child: const Text('BACK'),
                                    ),
                                  ],
                                ),
                              )
                            : TextButton(
                                onPressed: onStepCancel,
                                child: const Text('BACK'),
                              ),
              ],
            );
          },

----------------------

                Setting Steppers Steps State

class _State extends State<MyApp> {

  int _current;

  List<StepState> _listState;

  @override
  void initState() {
    _current = 0;
    _listState = [
      StepState.indexed,
      StepState.editing,
      StepState.complete,
    ];
    super.initState();
  }

  List<Step> _createSteps(BuildContext context) {
    List<Step> _steps = <Step>[
      new Step(
        state: _current == 0
            ? _listState[1]
            : _current > 0 ? _listState[2] : _listState[0],
        title: new Text('Step 1'),
        content: new Text('Do Something'),
        isActive: true,
      ),
      new Step(
        state: _current == 1
            ? _listState[1]
            : _current > 1 ? _listState[2] : _listState[0],
        title: new Text('Step 2'),
        content: new Text('Do Something'),
        isActive: true,
      ),
      new Step(
        state: _current == 2
            ? _listState[1]
            : _current > 2 ? _listState[2] : _listState[0],
        title: new Text('Step 3'),
        content: new Text('Do Something'),
        isActive: true,
      ),
    ];
    return _steps;
  }

  @override
  Widget build(BuildContext context) {
    List<Step> _stepList = _createSteps(context);
    return new Scaffold(
      appBar: new AppBar(
        title: new Text('Stepper Example'),
      ),
      body: new Container(
        padding: new EdgeInsets.all(20.0),
        child: new Center(
          child: new Column(
            children: <Widget>[
              Expanded(
                child: Stepper(
                  type: StepperType.vertical,
                  steps: _stepList,
                  currentStep: _current,
                  onStepContinue: () {
                    setState(() {
                      if (_current < _stepList.length - 1) {
                        _current++;
                      } else {
                        _current = _stepList.length - 1;
                      }
                      //_setStep(context);
                    });
                  },
                  onStepCancel: () {
                    setState(() {
                      if (_current > 0) {
                        _current--;
                      } else {
                        _current = 0;
                      }
                      //_setStep(context);
                    });
                  },
                  onStepTapped: (int i) {
                    setState(() {
                      _current = i;
                    });
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


----------------------

            Stepper with theme color change using primarySwatch

return Scaffold(
      appBar: AppBar(title: Text(widget.appBarTitle)),
      backgroundColor: Config.grayBackGround,
      body: Theme(
    data: ThemeData(
          primarySwatch: Config.createMaterialColor(Color(0xffA8C300)),
    ),
    child: Stepper(
        steps: initSteps(),
        physics: const BouncingScrollPhysics(),
        currentStep: currentStep,
        onStepTapped: (step) {
          setState(() {
            currentStep = step;
          });
        },
      ),
    ));


          Method 2 Using Color Scheme

return Scaffold(
      appBar: AppBar(title: Text(widget.appBarTitle)),
      backgroundColor: Config.grayBackGround,
      body: Theme(
    data: ThemeData(
      colorScheme: Theme.of(context).colorScheme.copyWith(primary: Color(0xffA8C300))
    ),
    child: Stepper(
        steps: initSteps(),
        physics: const BouncingScrollPhysics(),
        currentStep: currentStep,
        onStepTapped: (step) {
          setState(() {
            currentStep = step;
          });
        },
      ),
    ));

----------------------


        steppers steps state


Step States [state: StepState.disabled, state: StepState.editing, state: StepState.error]


----------------------

        stepper with form validators

   import 'package:flutter/material.dart';
//import 'package:validate/validate.dart';  //for validation

void main() {
  runApp( MyApp());
}

List<GlobalKey<FormState>> formKeys = [GlobalKey<FormState>(), GlobalKey<FormState>(), GlobalKey<FormState>(), GlobalKey<FormState>()];

class MyApp extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return  MyAppScreenMode();
  }
}

class MyData {
  String name = '';
  String phone = '';
  String email = '';
  String age = '';
}

class MyAppScreenMode extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return  MaterialApp(
        theme:  ThemeData(
          primarySwatch: Colors.lightGreen,
        ),
        home:  Scaffold(
          appBar:  AppBar(
            title:  Text('Steppers'),
          ),
          body:  StepperBody(),
        ));
  }
}

class StepperBody extends StatefulWidget {
  @override
  _StepperBodyState createState() =>  _StepperBodyState();
}

class _StepperBodyState extends State<StepperBody> {
  int currStep = 0;
  static var _focusNode =  FocusNode();
  GlobalKey<FormState> _formKey =  GlobalKey<FormState>();
  static MyData data =  MyData();

  @override
  void initState() {
    super.initState();
    _focusNode.addListener(() {
      setState(() {});
      print('Has focus: $_focusNode.hasFocus');
    });
  }

  @override
  void dispose() {
    _focusNode.dispose();
    super.dispose();
  }



  List<Step> steps = [
     Step(
        title: const Text('Name'),
        //subtitle: const Text('Enter your name'),
        isActive: true,
        //state: StepState.error,
        state: StepState.indexed,
        content: Form(
          key: formKeys[0],
          child: Column(
            children: <Widget>[
               TextFormField(
                focusNode: _focusNode,
                keyboardType: TextInputType.text,
                autocorrect: false,
                onSaved: (String value) {
                  data.name = value;
                },
                maxLines: 1,
                //initialValue: 'Aseem Wangoo',
                validator: (value) {
                  if (value.isEmpty || value.length < 1) {
                    return 'Please enter name';
                  }
                },
                decoration:  InputDecoration(
                    labelText: 'Enter your name',
                    hintText: 'Enter a name',
                    //filled: true,
                    icon: const Icon(Icons.person),
                    labelStyle:
                     TextStyle(decorationStyle: TextDecorationStyle.solid)),
              ),
            ],
          ),
        )),
     Step(
        title: const Text('Phone'),
        //subtitle: const Text('Subtitle'),
        isActive: true,
        //state: StepState.editing,
        state: StepState.indexed,
        content: Form(
          key: formKeys[1],
          child: Column(
            children: <Widget>[
               TextFormField(
                keyboardType: TextInputType.phone,
                autocorrect: false,
                validator: (value) {
                  if (value.isEmpty || value.length < 10) {
                    return 'Please enter valid number';
                  }
                },
                onSaved: (String value) {
                  data.phone = value;
                },
                maxLines: 1,
                decoration:  InputDecoration(
                    labelText: 'Enter your number',
                    hintText: 'Enter a number',
                    icon: const Icon(Icons.phone),
                    labelStyle:
                     TextStyle(decorationStyle: TextDecorationStyle.solid)),
              ),
            ],
          ),
        )),
     Step(
        title: const Text('Email'),
        // subtitle: const Text('Subtitle'),
        isActive: true,
        state: StepState.indexed,
        // state: StepState.disabled,
        content:  Form(
          key: formKeys[2],
          child: Column(
            children: <Widget>[
              TextFormField(
                keyboardType: TextInputType.emailAddress,
                autocorrect: false,
                validator: (value) {
                  if (value.isEmpty || !value.contains('@')) {
                    return 'Please enter valid email';
                  }
                },
                onSaved: (String value) {
                  data.email = value;
                },
                maxLines: 1,
                decoration:  InputDecoration(
                    labelText: 'Enter your email',
                    hintText: 'Enter a email address',
                    icon: const Icon(Icons.email),
                    labelStyle:
                     TextStyle(decorationStyle: TextDecorationStyle.solid)),
              ),
            ],
          ),
        )),
     Step(
        title: const Text('Age'),
        // subtitle: const Text('Subtitle'),
        isActive: true,
        state: StepState.indexed,
        content:  Form(
          key: formKeys[3],
          child: Column(
            children: <Widget>[
              TextFormField(
                keyboardType: TextInputType.number,
                autocorrect: false,
                validator: (value) {
                  if (value.isEmpty || value.length > 2) {
                    return 'Please enter valid age';
                  }
                },
                maxLines: 1,
                onSaved: (String value) {
                  data.age = value;
                },
                decoration:  InputDecoration(
                    labelText: 'Enter your age',
                    hintText: 'Enter age',
                    icon: const Icon(Icons.explicit),
                    labelStyle:
                     TextStyle(decorationStyle: TextDecorationStyle.solid)),
              ),
            ],
          ),
        )),
    //  Step(
    //     title: const Text('Fifth Step'),
    //     subtitle: const Text('Subtitle'),
    //     isActive: true,
    //     state: StepState.complete,
    //     content: const Text('Enjoy Step Fifth'))
  ];

  @override
  Widget build(BuildContext context) {
    void showSnackBarMessage(String message,
        [MaterialColor color = Colors.red]) {
      Scaffold
          .of(context)
          .showSnackBar( SnackBar(content:  Text(message)));
    }

    void _submitDetails() {
      final FormState formState = _formKey.currentState;

      if (!formState.validate()) {
        showSnackBarMessage('Please enter correct data');
      } else {
        formState.save();
        print("Name: ${data.name}");
        print("Phone: ${data.phone}");
        print("Email: ${data.email}");
        print("Age: ${data.age}");

        showDialog(
            context: context,
            child:  AlertDialog(
              title:  Text("Details"),
              //content:  Text("Hello World"),
              content:  SingleChildScrollView(
                child:  ListBody(
                  children: <Widget>[
                     Text("Name : " + data.name),
                     Text("Phone : " + data.phone),
                     Text("Email : " + data.email),
                     Text("Age : " + data.age),
                  ],
                ),
              ),
              actions: <Widget>[
                 FlatButton(
                  child:  Text('OK'),
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                ),
              ],
            ));
      }
    }

    return  Container(
        child:  Form(
          key: _formKey,
          child:  ListView(children: <Widget>[
             Stepper(
              steps: steps,
              type: StepperType.vertical,
              currentStep: this.currStep,
              onStepContinue: () {
                setState(() {
                  if(formKeys[currStep].currentState.validate()) {
                    if (currStep < steps.length - 1) {
                      currStep = currStep + 1;
                    } else {
                      currStep = 0;
                    }
                  }
                  // else {
                  // Scaffold
                  //     .of(context)
                  //     .showSnackBar( SnackBar(content:  Text('$currStep')));

                  // if (currStep == 1) {
                  //   print('First Step');
                  //   print('object' + FocusScope.of(context).toStringDeep());
                  // }

                  // }
                });
              },
              onStepCancel: () {
                setState(() {
                  if (currStep > 0) {
                    currStep = currStep - 1;
                  } else {
                    currStep = 0;
                  }
                });
              },
              onStepTapped: (step) {
                setState(() {
                  currStep = step;
                });
              },
            ),
             RaisedButton(
              child:  Text(
                'Save details',
                style:  TextStyle(color: Colors.white),
              ),
              onPressed: _submitDetails,
              color: Colors.blue,
            ),
          ]),
        ));
  }
}

----------------------------------------------------------------------------------------------------

                ||||| s-c-r-e-e-n-s-i-z-e-s |||||

~~~ Getting Screen Sizes

double deviceWidth = MediaQuery.of(context).size.width;
double deviceHeight = MediaQuery.of(context).size.height;

Container(
width: deviceWidth<200?50:deviceWidth*0.5,
height: deviceHeight<500?50:deviceHeight>800?200:deviceHeight*0.2,
child: //child,
)

----------------------------------------------------------------------------------------------------

                ||||| c-a-r-d-v-i-e-w-s |||||
                      ||||| c-a-r-d|||||


~~~ CardViews With Image at the very end of the cards

import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final title = 'MyApp';

return MaterialApp(
  title: title,
  home: Scaffold(
    appBar: AppBar(
      title: Text(title),
    ),
    body: ListView(
      children: <Widget>[
        Container(
          margin:EdgeInsets.all(8.0),
          child: Card(
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(8.0))),
            child: InkWell(
              onTap: () => print("ciao"),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,  // add this
                children: <Widget>[
                  ClipRRect(
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(8.0),
                      topRight: Radius.circular(8.0),
                    ),
                    child: Image.network(
                        'https://placeimg.com/640/480/any',
                       // width: 300,
                        height: 150,
                        fit:BoxFit.fill

                    ),
                  ),
                  ListTile(
                    title: Text('Pub 1'),
                    subtitle: Text('Location 1'),
                  ),
                ],
              ),
            ),
          ),
        ),
        Container(
          margin:EdgeInsets.all(8.0),
          child: Card(
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(8.0))),
            child: InkWell(
              onTap: () => print("ciao"),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: <Widget>[
                  ClipRRect(
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(8.0),
                      topRight: Radius.circular(8.0),
                    ),
                    child: Image.network(
                        'https://placeimg.com/640/480/any',
                        // width: 300,
                        height: 150,
                        fit:BoxFit.fill

                    ),
                  ),
                  ListTile(
                    title: Text('Pub 1'),
                    subtitle: Text('Location 1'),
                  ),
                ],
              ),
            ),
          ),
        ),
        Container(
          margin:EdgeInsets.all(8.0),
          child: Card(
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(8.0))),
            child: InkWell(
              onTap: () => print("ciao"),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: <Widget>[
                  ClipRRect(
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(8.0),
                      topRight: Radius.circular(8.0),
                    ),
                    child: Image.network(
                        'https://placeimg.com/640/480/any',
                        // width: 300,
                        height: 150,
                        fit:BoxFit.fill

                    ),
                  ),
                  ListTile(
                    title: Text('Pub 1'),
                    subtitle: Text('Location 1'),
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    ),
      ),
    );
  }
}


~~~ Card with border at the right end side or the left end side

  Card(
            clipBehavior: Clip.antiAlias,
            child: Container(
              height: 100,
              decoration: BoxDecoration(
                  border: Border(
                      right: BorderSide(color: Colors.green, width: 5))),
            ),
          )

~~~ Card with border at the right end side or the left end side  method 2

Container(
  padding: const EdgeInsets.only(right: 8.0, left: 8.0),
  height: 60,
  child: Card(
    elevation: 2,
    shape: RoundedRectangleBorder(
        side: BorderSide(color: appThemeColor.shade200, width: 0.5),
        borderRadius: BorderRadius.circular(5)),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: <Widget>[
        Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.only(
                topRight: Radius.circular(15),
                bottomRight: Radius.circular(15)),
            color: Colors.deepPurple,
          ),
          width: 5,
        ),
      ],
    ),
  ),
)


----------------------------------------------------------------------------------------------------


                         ||||| b-u-i-l-d-e-r |||||
                        |||||| b-u-i-l-d-e-r-s|||||
                           |||||| c-h-i-l-d|||||
                              |||||| i-f|||||

~~~ Place below code in child


Builder(builder: (context) {

      if(someCondition) {
        return Text('A');
      }
      else {
        return Text('B');
      }
    })


----------------------------------------------------------------------------------------------------


                         ||||| inkwell |||||
                      |||||| i-n-k-w-e-l-l |||||

~~~ Always Add onTap to implement the inkwell

~~~ Example inkwell

Column(
                  children: [
                    Container(
                      width: 227,
                      height: 227,
                      child: Ink.image(
                        image: NetworkImage(
                            'https://images.unsplash.com/photo-1587207433549-7d796bccc6a2?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8YnV0dG9ufGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60'),
                        fit: BoxFit.cover,
                        child: InkWell(
                          onTap: () {},
                        ),
                      ),
                    ),
                    Text('First Text'),
                    // add your other widgets
                  ],
                )

~~~ Example Inkwell on card

Card(
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24)),
              child: InkWell(
                borderRadius: BorderRadius.circular(24),
                splashColor: Colors.brown.withOpacity(0.7), // Splash color
                onTap: () {},
                child: Ink(
                  width: 100,
                  height: 100,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(24),
                    image: DecorationImage(
                      fit: BoxFit.cover,
                      image: AssetImage('icons/ic_huawei.png'), // Background image
                    ),
                  ),
                ),
              ),
            )

~~~ Example Inkwell on card 2

Card(
              color: Colors.blue, // Backgrond color
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24)),
              child: InkWell(
                borderRadius: BorderRadius.circular(24),
                splashColor: Colors.red.withOpacity(0.5), // Spl// ash color
                onTap: () {},
                child: Ink(width: 100, height: 100),
              ),
            )

~~~ Example Inkwell Ripple Effect on a card with image over it


Card(
  child: Ink.image(
     image: AssetImage('images/dog.jpeg'),
     fit: BoxFit.contain,
     height: 100,
     child: InkWell(
        splashColor: Colors.green.withOpacity(.2),
        onTap: () {},
     ),
   ),
 )

~~~ Example Inkwell with card and ListTile

Card(
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24)),
                  child: InkWell(
                      borderRadius: BorderRadius.circular(24),
                      splashColor: Config.accentColor.withOpacity(0.2),
                      onTap: (){},
                      child: ListTile(
                          title: Text("Title"),
                          subtitle: Text("Subtitle"),
                          leading: CircleAvatar(
                            child: Image(
                              image: AssetImage('icons/ic_google_pixel.png'),
                            ),
                          ),
                        ),
                      ))

~~~~ Example Inkwell on optionsMenus

        appBar: AppBar(
                title: const Text("Cart"),
                actions: [
                // using container below
                  Container(
                    padding: EdgeInsets.all(5),
                    margin: EdgeInsets.all(5),
                    child: InkWell(
                      customBorder: new CircleBorder(),
                      onTap: () {

                      },
                      splashColor: Colors.white,
                      child: new Icon(
                        Icons.account_circle_rounded,
                        size: 30,
                      ),
                    ),
                  ),
                  // Using icon button below
                  // you can use other properties of IconButton like color of spash: splashColor: Colors.white
                  // you can also use tooltip property:  tooltip: 'Répète le mot',
                  IconButton(
                                icon: Icon(
                                  Icons.account_circle_rounded,
                                ),
                                iconSize: 25,
                                splashRadius: 25,
                                onPressed: () {},
                              ),

                ]
              )

----------------------------------------------------------------------------------------------------

                                  ||| Shimmer |||
                               ||| S-h-i-m-m-e-r |||


Expanded(
// First we check if the ViewModel is busy (isBusy :) definitely) and display the Shimmer
  child: viewModel.isBusy
    ? Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: ListView.builder(
       itemCount: 6,
       itemBuilder: (context, index) {
        return Card(
         elevation: 1.0,
         shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
         ),
         child: const SizedBox(height: 80),
        );
       },
      ),
     )
    : ListView.builder(
      itemCount: viewModel.charactersList!.length,
      itemBuilder: (context, index) {
       return Card(
         elevation: 1.0,
         // This is just a little play with colors changing the colors everytime the app is refreshed or restarted :)
         color: Colors.primaries[Random()
               .nextInt(Colors.primaries.length)]
             .withOpacity(0.5),
         shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
           ),
         child: Container()
       );
      },
     ),
 )

 ----------------------------------------------------------------------------------------------------

                                   ||| Firebase |||
                                ||| F-i-r-e-b-a-s-e |||


 --------------------------

 ||| Firestore |||
 ||| F-i-r-e-s-t-o-r-e |||


 ~~~~ First create the firebase firestore database in firebase console

 ~~~ If you want to access the data without having to login change firebase rules to below

    rules_version = '2';
    service cloud.firestore {
      match /databases/{database}/documents {
        match /{document=**} {
          allow read, write: if true;
        }
      }
    }

 ~~~~ Add data using list like below


 List<Map<String, dynamic>> data = [
     {
       "name": "Athletic Sport Sneakers",
       "category": "Shoes",
       "price": 1500.0,
       "deliveryFee": 200.0,
       "weight": "0.2 Kg",
       "description":
           "Fashion Boys Sneakers Athletic Shoes Sport Sneakers Breathable Running Shoes",
       "image":
           "https://ke.jumia.is/unsafe/fit-in/500x500/filters:fill(white)/product/46/121684/1.jpg?0927",
       "variation": [
         "M",
         "L",
         "XL",
         "XXL",
         "XXXL"
       ]
     },
     {
       "name": "Khaki Mens Trouser",
       "category": "Clothing",
       "price": 2199.0,
       "deliveryFee": 150.0,
       "weight": "0.08 Kg",
       "description":
           "Fashion 2 Soft Khaki Men's Trouser Stretch Slim Fit Casual- Black & Dark Grey+ Free Pair Of Socks",
       "image":
           "https://ke.jumia.is/unsafe/fit-in/500x500/filters:fill(white)/product/03/371951/1.jpg?3174",
       "variation": [
         "S",
         "M",
         "L",
         "XL",
       ]
     }
   ];

~~~ Create method for adding the data to firebase firestore

    addData() async {
        for (var element in data){
          FirebaseFirestore.instance.collection("products").add(element);
        }
      }

~~~ Then in initState state call the addDate method

    @override
      void initState() {
        super.initState();
        addData();
      }

 ----------------------------------------------------------------------------------------------------
 ****************************************************************************************************
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ####################################################################################################

                                   ||| Animations |||
                               ||| A-n-i-m-a-t-i-o-n-s |||


---------------------------------------

       ||| AnimatedContainer |||
        ||| AnimateCrossFade ||
 ||| A-n-i-m-a-t-e-d-C-o-n-t-a-i-n-e-r |||
   ||| A-n-i-m-a-t-e-C-r-o-s-s-F-a-d-e ||

~~~ Example code

class BS extends StatefulWidget {
      _BS createState() => _BS();
    }

    class _BS extends State<BS> {
      bool _showSecond = false;

      @override
      Widget build(BuildContext context) {
        return BottomSheet(
          onClosing: () {},
          builder: (BuildContext context) => AnimatedContainer(
            margin: EdgeInsets.all(20),
            decoration: BoxDecoration(
                color: Colors.white, borderRadius: BorderRadius.circular(30)),
            child: AnimatedCrossFade(
                firstChild: Container(
                  constraints: BoxConstraints.expand(
                      height: MediaQuery.of(context).size.height - 200),
//remove constraint and add your widget hierarchy as a child for first view
                  padding: EdgeInsets.all(20),
                  child: Align(
                    alignment: Alignment.bottomCenter,
                    child: RaisedButton(
                      onPressed: () => setState(() => _showSecond = true),
                      padding: EdgeInsets.all(15),
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10)),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Text("Suivant"),
                        ],
                      ),
                    ),
                  ),
                ),
                secondChild: Container(
                  constraints: BoxConstraints.expand(
                      height: MediaQuery.of(context).size.height / 3),
//remove constraint and add your widget hierarchy as a child for second view
                  padding: EdgeInsets.all(20),
                  child: Align(
                    alignment: Alignment.bottomCenter,
                    child: RaisedButton(
                      onPressed: () => setState(() => _showSecond = false),
                      color: Colors.green,
                      padding: EdgeInsets.all(15),
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10)),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Text("ok"),
                        ],
                      ),
                    ),
                  ),
                ),
                crossFadeState: _showSecond
                    ? CrossFadeState.showSecond
                    : CrossFadeState.showFirst,
                duration: Duration(milliseconds: 400)),
            duration: Duration(milliseconds: 400),
          ),
        );
      }
    }

 ----------------------------------------------------------------------------------------------------
 ****************************************************************************************************
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ####################################################################################################

                                   ||| svg |||
                                  |||| s-v-g |||

  ~~~ Flutter svg package (https://pub.dev/packages/flutter_svg)
  ~~~ You can use the package like below

      icon: SvgPicture.asset(
              'svg_asset_path',
               color: Colors.white,
            ),
