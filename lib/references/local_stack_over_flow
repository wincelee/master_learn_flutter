JsonObjectWithJsonArrayThatHasName

{
    dataKey: [
      {
        key1: value1,
        key2: value2,
        key3: value3,
      }
    ]
}

```````````````````````````````````

Easiest way (one dimensional):

Map<String, dynamic> data = Map<String, dynamic>.from(json.decode(response.body));

print(data['name']);

````````````````````````````````
Map<String, dynamic> map = json.decode(response.body);
List<dynamic> data = map["dataKey"];
print(data[0]["name"]);


`````````````````````````````

You can use new Map<String, dynamic>.from(snapshot.value);

`````````````````````````````

As doesn't change the type, it's just an assertion.

You need to use:

map['eventType'].cast<String, dynamic>() or

Map<String, dynamic>.from(map['eventType'])

You can also solved by this way:

Map<String, dynamic> myMap = Map<String, dynamic>.from(/*Your Source*/ );


----------------------------------------------------------------------------

passing text from screen 1 to screen 2

openDetailPage(ItemModel data, int index) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) {
        return MovieDetailBlocProvider(
          child: MovieDetail(
            title: data.results[index].title,
            posterUrl: data.results[index].backdrop_path,
            description: data.results[index].overview,
            releaseDate: data.results[index].release_date,
            voteAverage: data.results[index].vote_average.toString(),
            movieId: data.results[index].id,
          ),
        );
      }),
    );
  }

----------------------------------------------------------------------------

Possible on click on backgroundImage

 Column(
                 crossAxisAlignment: CrossAxisAlignment.center,
                 mainAxisAlignment: MainAxisAlignment.spaceAround,
                 children: [
                   GestureDetector(
                     onTap: () {
                       Navigator.push(
                         context,
                         MaterialPageRoute(builder: (context) => MyApp7()),
                       );
                     },
                     child: CircleAvatar(
                       radius: 50,
                       // backgroundColor: Colors.amber,
                       child: CircleAvatar(
                           backgroundColor: Colors.grey[50],
                           radius: 50,
                           // child: Image.asset("assets/images/nophotoMale.png")
                           backgroundImage:
                               AssetImage("assets/images/nophotoMale.png")),
                     ),
                   ),
                 ],
               ),

--------------------------------------------------------------------------------------------

Material( // with Material
                    child: Image.network('https://placeimg.com/640/480/any'),
                    elevation: 18.0,
                    shape: const CircleBorder(),
                    clipBehavior: Clip.antiAlias,

                  )

--------------------------------------------------------------------------------------------

mainAxisAlignment: MainAxisAlignment.spaceEvenly (items in row arranged with even spaces)


--------------------------------------------------------------------------------------------

// If you want the whole table to be Centered, use the mainAxisAlignment property of Column.
///Column
mainAxisAlignment: MainAxisAlignment.center //Center Column contents vertically,
crossAxisAlignment: CrossAxisAlignment.center //Center Column contents horizontally,

///Row
mainAxisAlignment: MainAxisAlignment.center //Center Row contents horizontally,
crossAxisAlignment: CrossAxisAlignment.center //Center Row contents vertically,

---------------------------------------------------------------------------------------------

Make Column Items Stretch and fill the column from left to right and center text

crossAxisAlignment: CrossAxisAlignment.stretch

-------------------------------------------------------------------------------------------

Wrap_content ,Wrap_content :

 //use this as child
 Wrap(
  children: <Widget>[*your_child*])

Match_parent,Match_parent:

 //use this as child
Container(
        height: double.infinity,
    width: double.infinity,child:*your_child*)

Match_parent,Wrap_content :

 //use this as child
Row(
  mainAxisSize: MainAxisSize.max,
  children: <Widget>[*your_child*],
);

Wrap_content ,Match_parent:

 //use this as child
Column(
  mainAxisSize: MainAxisSize.max,
  children: <Widget>[your_child],
);