JsonObjectWithJsonArrayThatHasName

{
    dataKey: [
      {
        key1: value1,
        key2: value2,
        key3: value3,
      }
    ]
}

```````````````````````````````````

Easiest way (one dimensional):

Map<String, dynamic> data = Map<String, dynamic>.from(json.decode(response.body));

print(data['name']);

````````````````````````````````
Map<String, dynamic> map = json.decode(response.body);
List<dynamic> data = map["dataKey"];
print(data[0]["name"]);


`````````````````````````````

You can use new Map<String, dynamic>.from(snapshot.value);

`````````````````````````````

As doesn't change the type, it's just an assertion.

You need to use:

map['eventType'].cast<String, dynamic>() or

Map<String, dynamic>.from(map['eventType'])

You can also solved by this way:

Map<String, dynamic> myMap = Map<String, dynamic>.from(/*Your Source*/ );


----------------------------------------------------------------------------

passing text from screen 1 to screen 2

openDetailPage(ItemModel data, int index) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) {
        return MovieDetailBlocProvider(
          child: MovieDetail(
            title: data.results[index].title,
            posterUrl: data.results[index].backdrop_path,
            description: data.results[index].overview,
            releaseDate: data.results[index].release_date,
            voteAverage: data.results[index].vote_average.toString(),
            movieId: data.results[index].id,
          ),
        );
      }),
    );
  }

----------------------------------------------------------------------------

Possible on click on backgroundImage

 Column(
                 crossAxisAlignment: CrossAxisAlignment.center,
                 mainAxisAlignment: MainAxisAlignment.spaceAround,
                 children: [
                   GestureDetector(
                     onTap: () {
                       Navigator.push(
                         context,
                         MaterialPageRoute(builder: (context) => MyApp7()),
                       );
                     },
                     child: CircleAvatar(
                       radius: 50,
                       // backgroundColor: Colors.amber,
                       child: CircleAvatar(
                           backgroundColor: Colors.grey[50],
                           radius: 50,
                           // child: Image.asset("assets/images/nophotoMale.png")
                           backgroundImage:
                               AssetImage("assets/images/nophotoMale.png")),
                     ),
                   ),
                 ],
               ),

--------------------------------------------------------------------------------------------

Material( // with Material
                    child: Image.network('https://placeimg.com/640/480/any'),
                    elevation: 18.0,
                    shape: const CircleBorder(),
                    clipBehavior: Clip.antiAlias,

                  )

--------------------------------------------------------------------------------------------

mainAxisAlignment: MainAxisAlignment.spaceEvenly (items in row arranged with even spaces)


--------------------------------------------------------------------------------------------

// If you want the whole table to be Centered, use the mainAxisAlignment property of Column.
///Column
mainAxisAlignment: MainAxisAlignment.center //Center Column contents vertically,
crossAxisAlignment: CrossAxisAlignment.center //Center Column contents horizontally,

///Row
mainAxisAlignment: MainAxisAlignment.center //Center Row contents horizontally,
crossAxisAlignment: CrossAxisAlignment.center //Center Row contents vertically,

---------------------------------------------------------------------------------------------

Make Column Items Stretch and fill the column from left to right and center text

crossAxisAlignment: CrossAxisAlignment.stretch

-------------------------------------------------------------------------------------------

Wrap_content ,Wrap_content :

 //use this as child
 Wrap(
  children: <Widget>[*your_child*])

Match_parent,Match_parent:

 //use this as child
Container(
        height: double.infinity,
    width: double.infinity,child:*your_child*)

Match_parent,Wrap_content :

 //use this as child
Row(
  mainAxisSize: MainAxisSize.max,
  children: <Widget>[*your_child*],
);

Wrap_content ,Match_parent:

 //use this as child
Column(
  mainAxisSize: MainAxisSize.max,
  children: <Widget>[your_child],
);

You should use Expanded only within a Column, Row or Flex

----------------------------------------------------------------------------------------------------

                        l-i-s-t-s
                        printlist
                      p-r-i-n-t-l-i-s-t

Printing List

~~~ First Method 1 (override toString in class example below)

    >>> @override toString() => 'id: $id title: $title subTitle: $subTitle imageUrl: $imageUrl';

~~~ Using Method 2 (using for loop)

    >>>

    for (var item in itemsList) {
              Logger().i("id: ${item.id} title: ${item.title} subTitle: ${item.subTitle} imageUrl: ${item.imageUrl} ");
            }

~~~ Using Method 3 (Json Encode)

    >>> add toJsonFunction in Class

     Map<String, dynamic> toJson() => {
        'email': email,
        'about': about,
        'name': name,
        'picture': picture,
        'index': index,
        'imageFetchType': imageFetchType,
      };

     >>> log/print using jsonEncode

     log("UserList: ${jsonEncode(usersList)}");

----------------------------------------------------------------------------------------------------

Flutter Dense TextField

 decoration: InputDecoration(
                    isDense: true,
                    contentPadding: EdgeInsets.only(
                        bottom: 15, top: 15, left: 10, right: 10)),
     ),


-------------------------------------------------------------------------------------------------------

Check operating system platform (o-p-e-r-a-t-i-n-g p-l-a-t-f-o-r-m)

import 'package:flutter/foundation.dart';
if ((defaultTargetPlatform == TargetPlatform.iOS) || (defaultTargetPlatform == TargetPlatform.android)) {
    // Some android/ios specific code
}
else if ((defaultTargetPlatform == TargetPlatform.linux) || (defaultTargetPlatform == TargetPlatform.macOS) || (defaultTargetPlatform == TargetPlatform.windows)) {
    // Some desktop specific code there
}
else {
    // Some web specific code there
}

-------------------------------------------------------------------------------------------------------

                    t-e-x-t-f-i-e-l-d-s

~~~ Boolean method to directly return true or false

     bool isPhoneNumberEmpty() => phoneNoController.text.isEmpty;

     bool isPhoneNumberEmpty() => phoneNoController.text.isNotEmpty;

-------------------------------------------------------------------------------------------------------

                        basicAuth
                        b-a-s-i-c-A-u-t-h

import 'dart:convert';
import 'package:http/http.dart';

main() async {

  String username = 'luiz';
  String password = '123';
  String basicAuth = 'Basic ' + base64Encode('$username:$password');

  var response = await http.post(
      'https://api.site.io/new',
      headers: <String, String>{'authorization': basicAuth},
      body: {'name': 'doodle', 'color': 'blue'},
  );

  print('Response status: ${response.statusCode}');
  print('Response body: ${response.body}');

}

-------------------------------------------------------------------------------------------------------

                        c-u-p-e-r-t-i-n-o

Custom Cupertino dialog

static void exceptionsAlertDialog(BuildContext context) {
    showDialog(
        barrierDismissible: false,
        context: context,
        builder: (BuildContext context) {
          // prevent back button press
          return CupertinoAlertDialog(
            title: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: <Widget>[
                Text("Login | Register"),
                Icon(
                  Icons.error,
                  color: Colors.red,
                ),
              ],
            ),
            content:
                Text("We encountered an error while processing your request"),
            actions: <Widget>[
              CupertinoDialogAction(
                child: Text("close".toUpperCase()),
                onPressed: () {
                  Navigator.of(context).pop();
                },
              ),
            ],
          );
        });
  }

------------------------------

showDialog(
        barrierDismissible: false,
        context: context,
        builder: (BuildContext context) {
          // prevent back button press
          return CupertinoAlertDialog(
            title: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: <Widget>[
                Container(
                  width: double.infinity,
                    child: Text("Login | Register")),
                Container(
                    width: double.infinity,
                    child: Icon(
                  Icons.error,
                  size: 50,
                  color: Colors.red,
                )),
              ],
            ),
            content:
                Text("We encountered an error while processing your request"),
            actions: <Widget>[
              CupertinoDialogAction(
                child: Text("close".toUpperCase()),
                onPressed: () {
                  Navigator.of(context).pop();
                },
              ),
            ],
          );
        });

-------------------------------------------------------------------------------------------------------


                        richText | textSpan
                  r-i-c-h-t-e-x-t | t-e-x-t-s-p-a-n


 RichText(
   text: TextSpan(
     children: [
       TextSpan(
         text: 'Single tap',
         style: TextStyle(color: Colors.red[300]),
         recognizer: TapGestureRecognizer()..onTap = () {
           // Single tapped.
         },
       ),
       TextSpan(
         text: ' Double tap',
         style: TextStyle(color: Colors.green[300]),
         recognizer:  DoubleTapGestureRecognizer()..onDoubleTap = () {
           // Double tapped.
         }
       ),
       TextSpan(
         text: ' Long press',
         style: TextStyle(color: Colors.blue[300]),
         recognizer: LongPressGestureRecognizer()..onLongPress = () {
           // Long Pressed.
         },
       ),
     ],
   ),
 )

-------------------------------------------------------------------------------------------------------

 CircleAvatar(
      backgroundColor: Colors.blue,
      child: Text("A"),
  );

   CircleAvatar(
        backgroundColor: Colors.blue,
        child: Text("A"),
        maxRadius: 30,
        foregroundImage: NetworkImage("enterImageUrl"),
    );

      String mystring = 'Hello World';

      print('${mystring[0]}');

-------------------------------------------------------------------------------------------------------

                        s-t-e-p-p-e-r

Stepper(
        controlsBuilder: (context, {onStepContinue, onStepCancel}) {
          return Row(
            children: <Widget>[
              TextButton(
                onPressed: onStepContinue,
                child: const Text('NEXT'),
              ),
              TextButton(
                onPressed: onStepCancel,
                child: const Text('CANCEL'),
              ),
            ],
          );
        },
        ...
    )

----------------------

            Stepper controls according to each step

controlsBuilder: (BuildContext context,
              {VoidCallback onStepContinue, VoidCallback onStepCancel}) {
            return Row(
              children: <Widget>[
                _activeCurrentStep == 0
                    ? TextButton(
                        onPressed: onStepContinue,
                        child: const Text('NEXT'),
                      )
                    : _activeCurrentStep == 1
                        ? Container(
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                TextButton(
                                  onPressed: onStepContinue,
                                  child: const Text('NEXT'),
                                ),
                                TextButton(
                                  onPressed: onStepCancel,
                                  child: const Text('BACK'),
                                ),
                              ],
                            ),
                          )
                        : _activeCurrentStep >= 2
                            ? Container(
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    TextButton(
                                      onPressed: onStepContinue,
                                      child: const Text('SAVE'),
                                    ),
                                    TextButton(
                                      onPressed: onStepCancel,
                                      child: const Text('BACK'),
                                    ),
                                  ],
                                ),
                              )
                            : TextButton(
                                onPressed: onStepCancel,
                                child: const Text('BACK'),
                              ),
              ],
            );
          },

----------------------

                Setting Steppers Steps State

class _State extends State<MyApp> {

  int _current;

  List<StepState> _listState;

  @override
  void initState() {
    _current = 0;
    _listState = [
      StepState.indexed,
      StepState.editing,
      StepState.complete,
    ];
    super.initState();
  }

  List<Step> _createSteps(BuildContext context) {
    List<Step> _steps = <Step>[
      new Step(
        state: _current == 0
            ? _listState[1]
            : _current > 0 ? _listState[2] : _listState[0],
        title: new Text('Step 1'),
        content: new Text('Do Something'),
        isActive: true,
      ),
      new Step(
        state: _current == 1
            ? _listState[1]
            : _current > 1 ? _listState[2] : _listState[0],
        title: new Text('Step 2'),
        content: new Text('Do Something'),
        isActive: true,
      ),
      new Step(
        state: _current == 2
            ? _listState[1]
            : _current > 2 ? _listState[2] : _listState[0],
        title: new Text('Step 3'),
        content: new Text('Do Something'),
        isActive: true,
      ),
    ];
    return _steps;
  }

  @override
  Widget build(BuildContext context) {
    List<Step> _stepList = _createSteps(context);
    return new Scaffold(
      appBar: new AppBar(
        title: new Text('Stepper Example'),
      ),
      body: new Container(
        padding: new EdgeInsets.all(20.0),
        child: new Center(
          child: new Column(
            children: <Widget>[
              Expanded(
                child: Stepper(
                  type: StepperType.vertical,
                  steps: _stepList,
                  currentStep: _current,
                  onStepContinue: () {
                    setState(() {
                      if (_current < _stepList.length - 1) {
                        _current++;
                      } else {
                        _current = _stepList.length - 1;
                      }
                      //_setStep(context);
                    });
                  },
                  onStepCancel: () {
                    setState(() {
                      if (_current > 0) {
                        _current--;
                      } else {
                        _current = 0;
                      }
                      //_setStep(context);
                    });
                  },
                  onStepTapped: (int i) {
                    setState(() {
                      _current = i;
                    });
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


----------------------

            Stepper with theme color change using primarySwatch

return Scaffold(
      appBar: AppBar(title: Text(widget.appBarTitle)),
      backgroundColor: Config.grayBackGround,
      body: Theme(
    data: ThemeData(
          primarySwatch: Config.createMaterialColor(Color(0xffA8C300)),
    ),
    child: Stepper(
        steps: initSteps(),
        physics: const BouncingScrollPhysics(),
        currentStep: currentStep,
        onStepTapped: (step) {
          setState(() {
            currentStep = step;
          });
        },
      ),
    ));


          Method 2 Using Color Scheme

return Scaffold(
      appBar: AppBar(title: Text(widget.appBarTitle)),
      backgroundColor: Config.grayBackGround,
      body: Theme(
    data: ThemeData(
      colorScheme: Theme.of(context).colorScheme.copyWith(primary: Color(0xffA8C300))
    ),
    child: Stepper(
        steps: initSteps(),
        physics: const BouncingScrollPhysics(),
        currentStep: currentStep,
        onStepTapped: (step) {
          setState(() {
            currentStep = step;
          });
        },
      ),
    ));

----------------------


        steppers steps state


Step States [state: StepState.disabled, state: StepState.editing, state: StepState.error]


----------------------

        stepper with form validators

   import 'package:flutter/material.dart';
//import 'package:validate/validate.dart';  //for validation

void main() {
  runApp( MyApp());
}

List<GlobalKey<FormState>> formKeys = [GlobalKey<FormState>(), GlobalKey<FormState>(), GlobalKey<FormState>(), GlobalKey<FormState>()];

class MyApp extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return  MyAppScreenMode();
  }
}

class MyData {
  String name = '';
  String phone = '';
  String email = '';
  String age = '';
}

class MyAppScreenMode extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return  MaterialApp(
        theme:  ThemeData(
          primarySwatch: Colors.lightGreen,
        ),
        home:  Scaffold(
          appBar:  AppBar(
            title:  Text('Steppers'),
          ),
          body:  StepperBody(),
        ));
  }
}

class StepperBody extends StatefulWidget {
  @override
  _StepperBodyState createState() =>  _StepperBodyState();
}

class _StepperBodyState extends State<StepperBody> {
  int currStep = 0;
  static var _focusNode =  FocusNode();
  GlobalKey<FormState> _formKey =  GlobalKey<FormState>();
  static MyData data =  MyData();

  @override
  void initState() {
    super.initState();
    _focusNode.addListener(() {
      setState(() {});
      print('Has focus: $_focusNode.hasFocus');
    });
  }

  @override
  void dispose() {
    _focusNode.dispose();
    super.dispose();
  }



  List<Step> steps = [
     Step(
        title: const Text('Name'),
        //subtitle: const Text('Enter your name'),
        isActive: true,
        //state: StepState.error,
        state: StepState.indexed,
        content: Form(
          key: formKeys[0],
          child: Column(
            children: <Widget>[
               TextFormField(
                focusNode: _focusNode,
                keyboardType: TextInputType.text,
                autocorrect: false,
                onSaved: (String value) {
                  data.name = value;
                },
                maxLines: 1,
                //initialValue: 'Aseem Wangoo',
                validator: (value) {
                  if (value.isEmpty || value.length < 1) {
                    return 'Please enter name';
                  }
                },
                decoration:  InputDecoration(
                    labelText: 'Enter your name',
                    hintText: 'Enter a name',
                    //filled: true,
                    icon: const Icon(Icons.person),
                    labelStyle:
                     TextStyle(decorationStyle: TextDecorationStyle.solid)),
              ),
            ],
          ),
        )),
     Step(
        title: const Text('Phone'),
        //subtitle: const Text('Subtitle'),
        isActive: true,
        //state: StepState.editing,
        state: StepState.indexed,
        content: Form(
          key: formKeys[1],
          child: Column(
            children: <Widget>[
               TextFormField(
                keyboardType: TextInputType.phone,
                autocorrect: false,
                validator: (value) {
                  if (value.isEmpty || value.length < 10) {
                    return 'Please enter valid number';
                  }
                },
                onSaved: (String value) {
                  data.phone = value;
                },
                maxLines: 1,
                decoration:  InputDecoration(
                    labelText: 'Enter your number',
                    hintText: 'Enter a number',
                    icon: const Icon(Icons.phone),
                    labelStyle:
                     TextStyle(decorationStyle: TextDecorationStyle.solid)),
              ),
            ],
          ),
        )),
     Step(
        title: const Text('Email'),
        // subtitle: const Text('Subtitle'),
        isActive: true,
        state: StepState.indexed,
        // state: StepState.disabled,
        content:  Form(
          key: formKeys[2],
          child: Column(
            children: <Widget>[
              TextFormField(
                keyboardType: TextInputType.emailAddress,
                autocorrect: false,
                validator: (value) {
                  if (value.isEmpty || !value.contains('@')) {
                    return 'Please enter valid email';
                  }
                },
                onSaved: (String value) {
                  data.email = value;
                },
                maxLines: 1,
                decoration:  InputDecoration(
                    labelText: 'Enter your email',
                    hintText: 'Enter a email address',
                    icon: const Icon(Icons.email),
                    labelStyle:
                     TextStyle(decorationStyle: TextDecorationStyle.solid)),
              ),
            ],
          ),
        )),
     Step(
        title: const Text('Age'),
        // subtitle: const Text('Subtitle'),
        isActive: true,
        state: StepState.indexed,
        content:  Form(
          key: formKeys[3],
          child: Column(
            children: <Widget>[
              TextFormField(
                keyboardType: TextInputType.number,
                autocorrect: false,
                validator: (value) {
                  if (value.isEmpty || value.length > 2) {
                    return 'Please enter valid age';
                  }
                },
                maxLines: 1,
                onSaved: (String value) {
                  data.age = value;
                },
                decoration:  InputDecoration(
                    labelText: 'Enter your age',
                    hintText: 'Enter age',
                    icon: const Icon(Icons.explicit),
                    labelStyle:
                     TextStyle(decorationStyle: TextDecorationStyle.solid)),
              ),
            ],
          ),
        )),
    //  Step(
    //     title: const Text('Fifth Step'),
    //     subtitle: const Text('Subtitle'),
    //     isActive: true,
    //     state: StepState.complete,
    //     content: const Text('Enjoy Step Fifth'))
  ];

  @override
  Widget build(BuildContext context) {
    void showSnackBarMessage(String message,
        [MaterialColor color = Colors.red]) {
      Scaffold
          .of(context)
          .showSnackBar( SnackBar(content:  Text(message)));
    }

    void _submitDetails() {
      final FormState formState = _formKey.currentState;

      if (!formState.validate()) {
        showSnackBarMessage('Please enter correct data');
      } else {
        formState.save();
        print("Name: ${data.name}");
        print("Phone: ${data.phone}");
        print("Email: ${data.email}");
        print("Age: ${data.age}");

        showDialog(
            context: context,
            child:  AlertDialog(
              title:  Text("Details"),
              //content:  Text("Hello World"),
              content:  SingleChildScrollView(
                child:  ListBody(
                  children: <Widget>[
                     Text("Name : " + data.name),
                     Text("Phone : " + data.phone),
                     Text("Email : " + data.email),
                     Text("Age : " + data.age),
                  ],
                ),
              ),
              actions: <Widget>[
                 FlatButton(
                  child:  Text('OK'),
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                ),
              ],
            ));
      }
    }

    return  Container(
        child:  Form(
          key: _formKey,
          child:  ListView(children: <Widget>[
             Stepper(
              steps: steps,
              type: StepperType.vertical,
              currentStep: this.currStep,
              onStepContinue: () {
                setState(() {
                  if(formKeys[currStep].currentState.validate()) {
                    if (currStep < steps.length - 1) {
                      currStep = currStep + 1;
                    } else {
                      currStep = 0;
                    }
                  }
                  // else {
                  // Scaffold
                  //     .of(context)
                  //     .showSnackBar( SnackBar(content:  Text('$currStep')));

                  // if (currStep == 1) {
                  //   print('First Step');
                  //   print('object' + FocusScope.of(context).toStringDeep());
                  // }

                  // }
                });
              },
              onStepCancel: () {
                setState(() {
                  if (currStep > 0) {
                    currStep = currStep - 1;
                  } else {
                    currStep = 0;
                  }
                });
              },
              onStepTapped: (step) {
                setState(() {
                  currStep = step;
                });
              },
            ),
             RaisedButton(
              child:  Text(
                'Save details',
                style:  TextStyle(color: Colors.white),
              ),
              onPressed: _submitDetails,
              color: Colors.blue,
            ),
          ]),
        ));
  }
}